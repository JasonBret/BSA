function varargout = BSA(varargin)
% BSA MATLAB code for BSA.fig
%      BSA, by itself, creates a new BSA or raises the existing
%      singleton*.
%
%      H = BSA returns the handle to a new BSA or the handle to
%      the existing singleton*.
%
%      BSA('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in BSA.M with the given input arguments.
%
%      BSA('Property','Value',...) creates a new BSA or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before BSA_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to BSA_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help BSA

% Last Modified by GUIDE v2.5 06-Jan-2017 11:11:26

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @BSA_OpeningFcn, ...
                   'gui_OutputFcn',  @BSA_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before BSA is made visible.
function BSA_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to BSA (see VARARGIN)

% Choose default command line output for BSA
handles.output = hObject;
axes(handles.axes1)
imshow('LOGO.gif')


% Update handles structure
guidata(hObject, handles);


warning('off','MATLAB:HandleGraphics:ObsoletedProperty:JavaFrame');
jframe=get(hObject,'javaframe');
jIcon=javax.swing.ImageIcon('C:\Users\bret borbon\Desktop\Edge Algorithm\rsz_3logo.png');
jframe.setFigureIcon(jIcon);


% UIWAIT makes BSA wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = BSA_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in btnAnalyze.
function btnAnalyze_Callback(hObject, eventdata, handles)
% hObject    handle to btnAnalyze (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


global capturedImage;
global GCI;
global BW;
global regions;                             %global variable declaration inside btnAnalyze_Callback
global nClassify;
global keeperIndexes;
global nKeepers;
global nRejects;


delete(instrfindall);
imaqreset;

[ImagePath, folder] = uigetfile({'*.PNG*';'*.JPG*';'*.BMP*'}, 'Select Sample Image:','C:\Users\bret borbon\Desktop\Default Folder');   %for loading image with png jpg bmp extensions
capturedImage = im2double(imread(fullfile(folder, ImagePath)));  

h = subplot(1,1,1,'Parent',handles.pnlViewPort);   %showing original image on the panelviewport
subplot(1,1,1);
imshow(capturedImage);drawnow; 

GCI = rgb2gray(capturedImage);      %turn rgb image to grayscale
BW = GCI < 0.65;                    %set threshold value less than .65 to turn black & white
BWL = bwlabel(BW); 
regions = regionprops(BWL,'Area','Eccentricity','MajorAxisLength','MinorAxisLength','Perimeter','BoundingBox');  %region properties

allowedE = ([regions.Area] >= 350)&([regions.Area] <= 2000)&([regions.Eccentricity] > 0.8);   % extract valid targets. find regions accepted on the given condition. possible spermcells
keeperIndexes = find(allowedE); 
keeperBlobsImage = ismember(BWL, keeperIndexes);        %keep the extracted regions 

                                                                                                                                  
%analysis

mScale = 1/460800000.0;                                                      %ratio of pixel to micrometers

totalFound = numel(keeperIndexes); 
normals = 0;                                                                %set primay value of abnormal and normal to 0
abnormals = 0;  
sAreas = [regions.Area];
sPerimeters = [regions.Perimeter];                                           %setting new variables for region properties
sWidths = [regions.MinorAxisLength];
sLengths = [regions.MajorAxisLength];
sBB = [regions.BoundingBox];

oArea = zeros(1,numel(keeperIndexes));
oPerimeter = zeros(1,numel(keeperIndexes));              
oWidths = zeros(1,numel(keeperIndexes));            
oLengths = zeros(1,numel(keeperIndexes));
for idx = 1:totalFound
    
    %get data
    oArea(idx) = sAreas(keeperIndexes(idx))* mScale + 40e-6;
    oPerimeter(idx) = sPerimeters(keeperIndexes(idx))* mScale + 20e-6;
    oWidths(idx) = sWidths(keeperIndexes(idx))* mScale * 100;
    oLengths(idx) = sLengths(keeperIndexes(idx))* mScale * 100;
end




%classify

nClassify = ((((oArea <= 43.19e-6) & (oArea >= 37.75e-6)) | ((oLengths <= 9.59e-6) & (oLengths >= 8.81e-6))| ((oWidths <= 4.4e-6) & (oWidths >= 4.9e-6))| ((oPerimeter <= 22.8e-6) & (oPerimeter >= 24.48e-6))))|((((oArea <= 41.91e-6) & (oArea >= 39.55e-6)) | ((oLengths <= 9.72e-6) & (oLengths >= 9.10e-6))| ((oWidths <= 4.98e-6) & (oWidths >= 4.62e-6))| ((oPerimeter <= 23.29e-6) & (oPerimeter >= 25.05e-6))));  %classifying  normal spermcells

nKeepers = find(nClassify);
nRejects = find(not(nClassify));
normals = cast(numel(nKeepers),'single');
abnormals = cast(numel(nRejects),'single');

set(handles.txtResult,'String',sprintf('\nCounted: %.0f\n\nNormal(%%): %.2f %%\n\nAbnormal(%%): %.2f %%\n\nConcentration: %.0f',totalFound,normals/totalFound*100,abnormals/totalFound*100,totalFound*1e6));        %displaying the analysis results




% --- Executes when selected object is changed in uipanel3.
function uipanel3_SelectionChangeFcn(hObject, eventdata, handles)
% hObject    handle to the selected object in uipanel3 
% eventdata  structure with the following fields (see UIBUTTONGROUP)
%	EventName: string 'SelectionChanged' (read only)
%	OldValue: handle of the previously selected object or empty if none was selected
%	NewValue: handle of the currently selected object
% handles    structure with handles and user data (see GUIDATA)

global capturedImage;
global regions;
global keeperIndexes;                                                                    %global variable declaration inside uipanel3_SelectionChangeFcn
global nKeepers;
global nRejects;


h = subplot(1,1,1,'Parent',handles.pnlViewPort); 
subplot(1,1,1);

if strcmp(get(eventdata.NewValue,'Tag'),'rbtnDSC') == 1                     %else if statement for showing detected, normal and abnormal spermcells
  
   imshow(capturedImage);
   for k = 1 : length(keeperIndexes)
    thisBB = regions(keeperIndexes(k)).BoundingBox;
    rectangle('Position', [thisBB(1),thisBB(2),thisBB(3),thisBB(4)],...       % show detected spermcells
    'EdgeColor','k','LineWidth',2 )
   end
   
   
   drawnow;
   
elseif strcmp(get(eventdata.NewValue,'Tag'),'rbtnHNC') == 1
  
   imshow(capturedImage);
   for k = 1 : length(nKeepers)
    thisBB = regions(keeperIndexes(nKeepers(k))).BoundingBox;
    rectangle('Position', [thisBB(1),thisBB(2),thisBB(3),thisBB(4)],...       % show normal spermcells
    'EdgeColor','g','LineWidth',2 )
   end
   drawnow;
   
elseif strcmp(get(eventdata.NewValue,'Tag'),'rbtnHAC') == 1
  
   imshow(capturedImage);
   for k = 1 : length(nRejects)
    thisBB = regions(keeperIndexes(nRejects(k))).BoundingBox;
    rectangle('Position', [thisBB(1),thisBB(2),thisBB(3),thisBB(4)],...       % show abnormal spermcells
    'EdgeColor','b','LineWidth',2 )
   end
   drawnow;
    
    
end


% --- Executes on button press in about.
function about_Callback(hObject, eventdata, handles)
% hObject    handle to about (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
msgbox(sprintf('Boar Semen Analysis Using Intensity Thresholding Technique, is a MatLab based program developed for the betterment of Artificial Insemination Technology. This idea arouses from the problem of multiple trial of Artificial Insemination before the saw become finally pregnant. This multiple trial will become a burden, financially, to the livestock businessmen. Poor semen analysis are the root of all these problem.\n\nThe developers have come up with Boar Semen Analysis. It is a type of program wherein Morphology And Concentration of the boar semen was specially examined. These two factors were very important in quality analysis of the boar semen. The program developed detects and counts the abnormality percentage of the loaded microscopic image as well as the boar semen concentration. This program has easy navigational features. \n\nThis technology may be one of the important advances in Artificial Insemination Technology\n\n\n\n\n\n\nThe Developers:\n\nBorbon, Jason Bret Owen U.\nLago, Kenneth M.\nMalbataan,  Avegael M.'),'About');



% --- Executes on button press in exit.
function exit_Callback(hObject, eventdata, handles)
% hObject    handle to exit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

clc;
delete(handles.figure1);


% --- Executes on button press in pushbutton6.
function pushbutton6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
msgbox(sprintf('INSTRUCTIONS\n1. First, click "Load Image & Analyze" then select the microscopic image  in the designed folder.\n\n2. Once that the image appear on the screen, you can click the button "Highlight Detected Sperm Cells" if you want to see all the sperm cells that have been detected.\n\n3.On the other hand, you can also click the button "Highlight Normal Cells" to emphasize the normal sperm cells. "Highlight Abnormal Sperm Cells" will give emphasis to the abnormal cells.\n\n4. If you want to see the result, you can check it at the result box w/c can be found at the lower right of the GUI.\n\n5. By clicking the button "About" you will see some information regarding the program and its benefits as well as the developer of the program\n\n6. When your done, just click "Exit". '),'Help','help');
